generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AgeVerification {
  id              String                @id @default(cuid())
  userId          String                @unique
  idType          IdType
  idImageUrl      String
  status          AgeVerificationStatus @default(PENDING)
  verifiedAt      DateTime?
  verifiedBy      String?
  rejectionReason String?
  createdAt       DateTime              @default(now())
  User            User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([status])
}

model Block {
  id                         String   @id @default(cuid())
  blockerId                  String
  blockedId                  String
  blockedAt                  DateTime @default(now())
  User_Block_blockedIdToUser User     @relation("Block_blockedIdToUser", fields: [blockedId], references: [id], onDelete: Cascade)
  User_Block_blockerIdToUser User     @relation("Block_blockerIdToUser", fields: [blockerId], references: [id], onDelete: Cascade)

  @@unique([blockerId, blockedId])
  @@index([blockedId])
  @@index([blockerId])
}

model BlogCategory {
  id          String     @id @default(cuid())
  name        String     @unique
  slug        String     @unique
  description String?
  BlogPost    BlogPost[]

  @@index([slug])
}

model BlogPost {
  id              String        @id @default(cuid())
  authorId        String
  title           String
  slug            String        @unique
  metaTitle       String?
  metaDescription String?
  excerpt         String?
  content         String
  featuredImage   String?
  imageAlt        String?
  status          PostStatus    @default(DRAFT)
  publishedAt     DateTime?
  views           Int           @default(0)
  seoKeyword      String?
  tags            String[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  categoryId      String?
  User            User          @relation(fields: [authorId], references: [id])
  BlogCategory    BlogCategory? @relation(fields: [categoryId], references: [id])

  @@index([publishedAt])
  @@index([slug])
  @@index([status])
}

model Follow {
  id                            String   @id @default(cuid())
  followerId                    String
  followingId                   String
  followedAt                    DateTime @default(now())
  User_Follow_followerIdToUser  User     @relation("Follow_followerIdToUser", fields: [followerId], references: [id], onDelete: Cascade)
  User_Follow_followingIdToUser User     @relation("Follow_followingIdToUser", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Industry {
  id      String    @id @default(cuid())
  name    String    @unique
  slug    String    @unique
  Profile Profile[] @relation("ProfileIndustries")

  @@index([slug])
}

model Interest {
  id      String    @id @default(cuid())
  name    String    @unique
  slug    String    @unique
  Profile Profile[] @relation("ProfileInterests")

  @@index([slug])
}

model InterestRequest {
  id                                    String                @id @default(cuid())
  fromUserId                            String
  toUserId                              String
  message                               String
  status                                InterestRequestStatus @default(PENDING)
  createdAt                             DateTime              @default(now())
  respondedAt                           DateTime?
  User_InterestRequest_fromUserIdToUser User                  @relation("InterestRequest_fromUserIdToUser", fields: [fromUserId], references: [id], onDelete: Cascade)
  User_InterestRequest_toUserIdToUser   User                  @relation("InterestRequest_toUserIdToUser", fields: [toUserId], references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([fromUserId])
  @@index([status])
  @@index([toUserId])
}

model Match {
  id                       String      @id @default(cuid())
  user1Id                  String
  user2Id                  String
  matchedAt                DateTime    @default(now())
  endedAt                  DateTime?
  status                   MatchStatus @default(PENDING)
  endedByUserId            String?
  acceptedAt               DateTime?
  initiatedById            String
  User_Match_user1IdToUser User        @relation("Match_user1IdToUser", fields: [user1Id], references: [id], onDelete: Cascade)
  User_Match_user2IdToUser User        @relation("Match_user2IdToUser", fields: [user2Id], references: [id], onDelete: Cascade)

  @@unique([user1Id, user2Id])
  @@index([initiatedById])
  @@index([status])
  @@index([user1Id])
  @@index([user2Id])
}

model Message {
  id                            String   @id @default(cuid())
  senderId                      String
  receiverId                    String
  content                       String
  read                          Boolean  @default(false)
  createdAt                     DateTime @default(now())
  User_Message_receiverIdToUser User     @relation("Message_receiverIdToUser", fields: [receiverId], references: [id], onDelete: Cascade)
  User_Message_senderIdToUser   User     @relation("Message_senderIdToUser", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([senderId, receiverId])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  User      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([userId, read])
}

model Profile {
  id                   String            @id @default(cuid())
  userId               String            @unique
  bio                  String?
  profilePicture       String?
  cvUrl                String?
  workExperience       String?
  yearsOfExperience    ExperienceLevel?
  currentSituation     String?
  goals                String?
  preferredFrequency   MeetingFrequency?
  availableHours       Int?
  responseTime         ResponseTime?
  linkedIn             String?
  twitter              String?
  instagram            String?
  helpsWith            String?
  lookingFor           String?
  minMenteeAge         Int?
  maxMenteeAge         Int?
  status               ProfileStatus     @default(ACTIVE)
  isVerified           Boolean           @default(false)
  completionPercentage Int               @default(0)
  country              String?
  city                 String?
  timezone             String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  User                 User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  Industry             Industry[]        @relation("ProfileIndustries")
  Interest             Interest[]        @relation("ProfileInterests")

  @@index([status])
  @@index([userId])
}

model ProfileView {
  id        String   @id @default(cuid())
  viewerId  String?
  viewedId  String
  viewedAt  DateTime @default(now())
  ipAddress String?

  @@index([viewedId, viewedAt])
  @@index([viewerId])
}

model Report {
  id                           String       @id @default(cuid())
  reporterId                   String
  reportedId                   String
  reason                       ReportReason
  description                  String?
  status                       ReportStatus @default(PENDING)
  resolvedAt                   DateTime?
  resolvedNote                 String?
  createdAt                    DateTime     @default(now())
  User_Report_reportedIdToUser User         @relation("Report_reportedIdToUser", fields: [reportedId], references: [id], onDelete: Cascade)
  User_Report_reporterIdToUser User         @relation("Report_reporterIdToUser", fields: [reporterId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([status])
}

model Review {
  id                           String   @id @default(cuid())
  reviewerId                   String
  reviewedId                   String
  rating                       Int
  comment                      String?
  createdAt                    DateTime @default(now())
  User_Review_reviewedIdToUser User     @relation("Review_reviewedIdToUser", fields: [reviewedId], references: [id], onDelete: Cascade)
  User_Review_reviewerIdToUser User     @relation("Review_reviewerIdToUser", fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, reviewedId])
  @@index([rating])
  @@index([reviewedId])
}

model SavedProfile {
  id          String   @id @default(cuid())
  userId      String
  savedUserId String
  savedAt     DateTime @default(now())
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, savedUserId])
  @@index([userId])
}

model Session {
  id                          String        @id @default(cuid())
  mentorId                    String
  menteeId                    String
  title                       String?
  notes                       String?
  scheduledAt                 DateTime
  duration                    Int
  status                      SessionStatus @default(SCHEDULED)
  createdAt                   DateTime      @default(now())
  User_Session_menteeIdToUser User          @relation("Session_menteeIdToUser", fields: [menteeId], references: [id], onDelete: Cascade)
  User_Session_mentorIdToUser User          @relation("Session_mentorIdToUser", fields: [mentorId], references: [id], onDelete: Cascade)

  @@index([mentorId, menteeId])
  @@index([scheduledAt])
  @@index([status])
}

model User {
  id                                               String            @id @default(cuid())
  email                                            String            @unique
  emailVerified                                    DateTime?
  password                                         String?
  name                                             String
  age                                              Int
  role                                             UserRole          @default(MENTEE)
  isAdmin                                          Boolean           @default(false)
  createdAt                                        DateTime          @default(now())
  updatedAt                                        DateTime          @updatedAt
  AgeVerification                                  AgeVerification?
  Block_Block_blockedIdToUser                      Block[]           @relation("Block_blockedIdToUser")
  Block_Block_blockerIdToUser                      Block[]           @relation("Block_blockerIdToUser")
  BlogPost                                         BlogPost[]
  Follow_Follow_followerIdToUser                   Follow[]          @relation("Follow_followerIdToUser")
  Follow_Follow_followingIdToUser                  Follow[]          @relation("Follow_followingIdToUser")
  InterestRequest_InterestRequest_fromUserIdToUser InterestRequest[] @relation("InterestRequest_fromUserIdToUser")
  InterestRequest_InterestRequest_toUserIdToUser   InterestRequest[] @relation("InterestRequest_toUserIdToUser")
  Match_Match_user1IdToUser                        Match[]           @relation("Match_user1IdToUser")
  Match_Match_user2IdToUser                        Match[]           @relation("Match_user2IdToUser")
  Message_Message_receiverIdToUser                 Message[]         @relation("Message_receiverIdToUser")
  Message_Message_senderIdToUser                   Message[]         @relation("Message_senderIdToUser")
  Notification                                     Notification[]
  Profile                                          Profile?
  Report_Report_reportedIdToUser                   Report[]          @relation("Report_reportedIdToUser")
  Report_Report_reporterIdToUser                   Report[]          @relation("Report_reporterIdToUser")
  Review_Review_reviewedIdToUser                   Review[]          @relation("Review_reviewedIdToUser")
  Review_Review_reviewerIdToUser                   Review[]          @relation("Review_reviewerIdToUser")
  SavedProfile                                     SavedProfile[]
  Session_Session_menteeIdToUser                   Session[]         @relation("Session_menteeIdToUser")
  Session_Session_mentorIdToUser                   Session[]         @relation("Session_mentorIdToUser")

  @@index([email])
  @@index([role])
}

enum AgeVerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ExperienceLevel {
  ENTRY
  MID
  SENIOR
  EXECUTIVE
}

enum IdType {
  DRIVERS_LICENSE
  PROVISIONAL_LICENSE
  PASSPORT
  STUDENT_ID
}

enum InterestRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum MatchStatus {
  ACTIVE
  ENDED
  UNMATCHED
  PENDING
}

enum MeetingFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  FLEXIBLE
}

enum NotificationType {
  INTEREST_REQUEST
  MATCH
  MESSAGE
  SESSION_REMINDER
  SESSION_CONFIRMED
  REVIEW_RECEIVED
  PROFILE_VIEW
  NEW_MENTOR
  SYSTEM
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
}

enum ProfileStatus {
  ACTIVE
  NOT_ACCEPTING
  PAUSED
  PRIVATE
}

enum ReportReason {
  INAPPROPRIATE_BEHAVIOR
  HARASSMENT
  SPAM
  FAKE_PROFILE
  SAFETY_CONCERN
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWING
  RESOLVED
  DISMISSED
}

enum ResponseTime {
  WITHIN_24H
  TWO_THREE_DAYS
  WEEKLY
  FLEXIBLE
}

enum SessionStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
}

enum UserRole {
  MENTOR
  MENTEE
}
